"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { useToast } from "@/hooks/use-toast"
import type { Habit } from "@/lib/types"
import { formatShortDate } from "@/lib/utils"
import { deleteHabit, getHabits, initializeDefaultData, saveHabit, toggleHabitCompletion } from "@/lib/storage"
import { Check, ListChecks, Plus, Trash2 } from "lucide-react"

export default function HabitsPage() {
  const [habits, setHabits] = useState<Habit[]>([])
  const [newHabit, setNewHabit] = useState({
    name: "",
    description: "",
    category: "self-care" as const,
  })
  const [dialogOpen, setDialogOpen] = useState(false)
  const [dates, setDates] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const { toast } = useToast()

  useEffect(() => {
    const fetchHabits = async () => {
      try {
        // Initialize default data if needed
        await initializeDefaultData()

        // Load habits
        const storedHabits = await getHabits()
        setHabits(storedHabits)
      } catch (error) {
        console.error("Error loading habits:", error)
        toast({
          title: "Error loading habits",
          description: "There was a problem loading your habits. Please refresh the page.",
          variant: "destructive",
        })
      } finally {
        setLoading(false)
      }
    }

    // Generate dates for the last 7 days
    const last7Days = Array.from({ length: 7 }, (_, i) => {
      const date = new Date()
      date.setDate(date.getDate() - i)
      return date.toISOString().split("T")[0]
    }).reverse()

    setDates(last7Days)
    fetchHabits()
  }, [toast])

  const handleAddHabit = async () => {
    if (!newHabit.name.trim()) return

    try {
      const habit: Omit<Habit, "id" | "completedDates" | "createdAt"> = {
        name: newHabit.name,
        description: newHabit.description,
        category: newHabit.category,
      }

      // The ID will be generated by Supabase
      await saveHabit({
        ...habit,
        id: "",
        createdAt: new Date().toISOString(),
        completedDates: [],
      } as Habit)

      // Refresh habits
      const updatedHabits = await getHabits()
      setHabits(updatedHabits)

      setNewHabit({
        name: "",
        description: "",
        category: "self-care",
      })

      setDialogOpen(false)

      toast({
        title: "Habit created",
        description: "Your new habit has been created successfully.",
      })
    } catch (error) {
      console.error("Error adding habit:", error)
      toast({
        title: "Error creating habit",
        description: "There was a problem creating your habit. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleToggleHabit = async (habitId: string, date: string) => {
    try {
      await toggleHabitCompletion(habitId, date)

      // Update state with fresh data from database
      const updatedHabits = await getHabits()
      setHabits(updatedHabits)
    } catch (error) {
      console.error("Error toggling habit completion:", error)
      toast({
        title: "Error updating habit",
        description: "There was a problem updating your habit. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteHabit = async (habitId: string) => {
    try {
      await deleteHabit(habitId)
      setHabits(habits.filter((habit) => habit.id !== habitId))

      toast({
        title: "Habit deleted",
        description: "Your habit has been deleted successfully.",
      })
    } catch (error) {
      console.error("Error deleting habit:", error)
      toast({
        title: "Error deleting habit",
        description: "There was a problem deleting your habit. Please try again.",
        variant: "destructive",
      })
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "mindfulness":
        return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
      case "physical":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
      case "social":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"
      case "self-care":
        return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300"
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
    }
  }

  return (
    <div className="container max-w-4xl py-8 space-y-8 animate-in">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold tracking-tight">Habit Tracker</h1>
        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Add Habit
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Habit</DialogTitle>
              <DialogDescription>Create a new habit to track your progress and build consistency.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="name">Habit Name</Label>
                <Input
                  id="name"
                  placeholder="e.g., Morning Meditation"
                  value={newHabit.name}
                  onChange={(e) => setNewHabit({ ...newHabit, name: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="description">Description (Optional)</Label>
                <Textarea
                  id="description"
                  placeholder="Describe your habit..."
                  value={newHabit.description}
                  onChange={(e) => setNewHabit({ ...newHabit, description: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="category">Category</Label>
                <Select
                  value={newHabit.category}
                  onValueChange={(value) => setNewHabit({ ...newHabit, category: value as any })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="mindfulness">Mindfulness</SelectItem>
                    <SelectItem value="physical">Physical</SelectItem>
                    <SelectItem value="social">Social</SelectItem>
                    <SelectItem value="self-care">Self-Care</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleAddHabit} disabled={!newHabit.name.trim()}>
                Add Habit
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Habits Tracker */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ListChecks className="h-5 w-5" />
            Your Habits
          </CardTitle>
          <CardDescription>Track your daily habits to build consistency and improve your wellbeing.</CardDescription>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">
              <p className="text-muted-foreground">Loading your habits...</p>
            </div>
          ) : habits.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-muted-foreground mb-4">You haven't added any habits yet.</p>
              <Button onClick={() => setDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Add Your First Habit
              </Button>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr>
                    <th className="text-left p-2 min-w-[200px]">Habit</th>
                    {dates.map((date) => (
                      <th key={date} className="p-2 text-center">
                        <div className="text-xs font-medium">{formatShortDate(date)}</div>
                      </th>
                    ))}
                    <th className="w-10"></th>
                  </tr>
                </thead>
                <tbody>
                  {habits.map((habit) => (
                    <tr key={habit.id} className="border-t">
                      <td className="p-2">
                        <div className="font-medium">{habit.name}</div>
                        <div className="text-xs text-muted-foreground">{habit.description}</div>
                        <div className="mt-1">
                          <span className={`text-xs px-2 py-1 rounded-full ${getCategoryColor(habit.category)}`}>
                            {habit.category}
                          </span>
                        </div>
                      </td>
                      {dates.map((date) => (
                        <td key={date} className="p-2 text-center">
                          <Button
                            variant={habit.completedDates.includes(date) ? "default" : "outline"}
                            size="icon"
                            className="h-8 w-8 rounded-full"
                            onClick={() => handleToggleHabit(habit.id, date)}
                          >
                            {habit.completedDates.includes(date) && <Check className="h-4 w-4" />}
                            <span className="sr-only">
                              {habit.completedDates.includes(date) ? "Completed" : "Mark as completed"}
                            </span>
                          </Button>
                        </td>
                      ))}
                      <td className="p-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 text-muted-foreground hover:text-destructive"
                          onClick={() => handleDeleteHabit(habit.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                          <span className="sr-only">Delete</span>
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
        <CardFooter className="text-sm text-muted-foreground">
          Tip: Click on a circle to mark a habit as completed for that day.
        </CardFooter>
      </Card>
    </div>
  )
}
